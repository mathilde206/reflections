What happens when you initialize a repository? Why do you need to do it?

	You initialize a repository using the command git init. 
	If I then use the command git status to look at the status, i will see that the git repository is initialized but empty of commits. That's because git let's you control when you want to commit and also so that when you commit you can add some explanation. 

	what happens : 
	- a .git directory is created (that you can see using ls -a). That's where git will keep all the history.
	- if you don't do it, the version history is not tracked.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is an intermediary between the working directory and the git repository. It allows you to add several files that you want to commit together. It's valuable because it let's you highlight the logical changes you made.


Compare files 
	git diff => working repository and staging area
	git diff --staged => staging area and latest commit
	git diff commit 1 commit 1 => commit 1 & commit 2

How can you use the staging area to make sure you have one commit per logical change?
	I add in the staging area all the files that I have changes or that are related. If I want to make sure, I can use the command above: git diff with no argument to check the difference between the working directory and the staging area; if I use git diff --stage I can make sure all the changed I want to see in the next commit are in the staging area. 


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Having several branches can be useful when I want to try some experiment but not risk breaking my original version. In that case I would work on a different version and could add features and decide later if i want to add them to the master version or not. 
	It can also be useful for example if I want to create a version in another language without losing my original language. 

How do the diagrams help you visualize the branch structure?
	Diagrams help you visualize the branch structure because you can see which commits will be accessible by this branch, which will be by other branch and which will be unreachable. Unreachable commits are if you commit from a previous commit but you don't create a new branch, then the branch will have no name and if you don't write down the name of the commit, you lose it. 
	You can also see at what point in time the branch is becoming different, and maybe what is missing compared to the master and/or other branches. 


Commandes utiles
git merge branch master 
git show : montre la différence entre un commit et son parent ; utile si on merge deux branches car elles seront desormais par date et donc pas juste après leur parent. 


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	If we merge two branches together, git will delete the lines which were deleted from the moment the branch was started (but not modified in the other branch), add the lines which were added and leave the lines which were untouched untouched. All the commits will come one after the other, by date of commit, making it difficult to see which is the parent of which. By representing it as two separate, we can see the logical order of commits. 

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
Pros of automatic merging: it's less annoying, and it's pretty acurate
The Cons : maybe one person deleted a line and the other used this line later in their code. Now the line is no longer available. 